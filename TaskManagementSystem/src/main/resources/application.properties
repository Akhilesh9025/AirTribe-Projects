# Server Port
server.port=8080

# Spring Data JPA and PostgreSQL Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/taskmanager
spring.datasource.username=taskmanager
spring.datasource.password=taskManager
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate DDL Auto - 'update' for development, 'none' or 'validate' for production
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# Avoids N+1 issues in web layer, better to fetch eagerly or use @Transactional in service

# JWT Configuration
app.jwt-secret=k/w5y7/q+uJ6N8Q1e8z0pC4gB2tX9vY0m7Lz9m9k0j1h2g3f4e5d6c7b8a901234567890
app.jwt-expiration-milliseconds=86400000
# 24 hours (24 * 60 * 60 * 1000)

# File Upload Configuration
file.upload-dir=C:/Users/Akhilesh/Desktop/Airtribe/IntelliJ/AirTribe-Projects/TaskManager/UploadFiles

# Spring WebSocket (STOMP) Configuration
spring.websocket.broker.suffix=/topic,/queue 
  # Suffix for message broker destinations
spring.websocket.broker.enabled=true 
  # Enable STOMP broker features


# Logging
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.com.taskmanager=INFO 

# CORS Configuration
spring.web.cors.allowed-origins=http://localhost:3000,http://localhost:4200,http://localhost:8081 # Add  frontend URL(s)
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,PATCH,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true
spring.web.cors.max-age=3600